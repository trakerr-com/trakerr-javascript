/**
 * Trakerr API
 * Get your application events and errors to Trakerr via the *Trakerr API*.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TrakerrApi);
  }
}(this, function(expect, TrakerrApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TrakerrApi.AppEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppEvent', function() {
    it('should create an instance of AppEvent', function() {
      // uncomment below and update the code to test AppEvent
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be.a(TrakerrApi.AppEvent);
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property classification (base name: "classification")', function() {
      // uncomment below and update the code to test the property classification
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventType (base name: "eventType")', function() {
      // uncomment below and update the code to test the property eventType
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventMessage (base name: "eventMessage")', function() {
      // uncomment below and update the code to test the property eventMessage
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventTime (base name: "eventTime")', function() {
      // uncomment below and update the code to test the property eventTime
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventStacktrace (base name: "eventStacktrace")', function() {
      // uncomment below and update the code to test the property eventStacktrace
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventUser (base name: "eventUser")', function() {
      // uncomment below and update the code to test the property eventUser
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventSession (base name: "eventSession")', function() {
      // uncomment below and update the code to test the property eventSession
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextAppVersion (base name: "contextAppVersion")', function() {
      // uncomment below and update the code to test the property contextAppVersion
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextEnvName (base name: "contextEnvName")', function() {
      // uncomment below and update the code to test the property contextEnvName
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextEnvVersion (base name: "contextEnvVersion")', function() {
      // uncomment below and update the code to test the property contextEnvVersion
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextEnvHostname (base name: "contextEnvHostname")', function() {
      // uncomment below and update the code to test the property contextEnvHostname
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextAppBrowser (base name: "contextAppBrowser")', function() {
      // uncomment below and update the code to test the property contextAppBrowser
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextAppBrowserVersion (base name: "contextAppBrowserVersion")', function() {
      // uncomment below and update the code to test the property contextAppBrowserVersion
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextAppOS (base name: "contextAppOS")', function() {
      // uncomment below and update the code to test the property contextAppOS
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextAppOSVersion (base name: "contextAppOSVersion")', function() {
      // uncomment below and update the code to test the property contextAppOSVersion
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextDataCenter (base name: "contextDataCenter")', function() {
      // uncomment below and update the code to test the property contextDataCenter
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property contextDataCenterRegion (base name: "contextDataCenterRegion")', function() {
      // uncomment below and update the code to test the property contextDataCenterRegion
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property customProperties (base name: "customProperties")', function() {
      // uncomment below and update the code to test the property customProperties
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

    it('should have the property customSegments (base name: "customSegments")', function() {
      // uncomment below and update the code to test the property customSegments
      //var instane = new TrakerrApi.AppEvent();
      //expect(instance).to.be();
    });

  });

}));
